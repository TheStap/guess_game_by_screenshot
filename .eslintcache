[{"C:\\Users\\amali\\WebstormProjects\\random_game\\src\\index.tsx":"1","C:\\Users\\amali\\WebstormProjects\\random_game\\src\\serviceWorker.ts":"2","C:\\Users\\amali\\WebstormProjects\\random_game\\src\\App.tsx":"3","C:\\Users\\amali\\WebstormProjects\\random_game\\src\\config.ts":"4","C:\\Users\\amali\\WebstormProjects\\random_game\\src\\common\\api.ts":"5","C:\\Users\\amali\\WebstormProjects\\random_game\\src\\common\\utils.ts":"6","C:\\Users\\amali\\WebstormProjects\\random_game\\src\\store.ts":"7","C:\\Users\\amali\\WebstormProjects\\random_game\\src\\features\\filter\\index.tsx":"8","C:\\Users\\amali\\WebstormProjects\\random_game\\src\\features\\filter\\slice.ts":"9","C:\\Users\\amali\\WebstormProjects\\random_game\\src\\features\\game\\slice.ts":"10","C:\\Users\\amali\\WebstormProjects\\random_game\\src\\features\\game\\index.tsx":"11","C:\\Users\\amali\\WebstormProjects\\random_game\\src\\features\\difficulty\\index.tsx":"12","C:\\Users\\amali\\WebstormProjects\\random_game\\src\\features\\start\\index.tsx":"13","C:\\Users\\amali\\WebstormProjects\\random_game\\src\\interfaces\\common.ts":"14"},{"size":674,"mtime":1608198033096,"results":"15","hashOfConfig":"16"},{"size":5424,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":682,"mtime":1608619306022,"results":"18","hashOfConfig":"16"},{"size":254,"mtime":1608621628868,"results":"19","hashOfConfig":"16"},{"size":906,"mtime":1608107373827,"results":"20","hashOfConfig":"16"},{"size":237,"mtime":1608190120005,"results":"21","hashOfConfig":"16"},{"size":642,"mtime":1608618402936,"results":"22","hashOfConfig":"16"},{"size":4225,"mtime":1608536776921,"results":"23","hashOfConfig":"16"},{"size":2516,"mtime":1608620172150,"results":"24","hashOfConfig":"16"},{"size":3896,"mtime":1608619933136,"results":"25","hashOfConfig":"16"},{"size":6494,"mtime":1608620172169,"results":"26","hashOfConfig":"16"},{"size":1941,"mtime":1608620172188,"results":"27","hashOfConfig":"16"},{"size":310,"mtime":1608543707053,"results":"28","hashOfConfig":"16"},{"size":129,"mtime":1608618402936,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"hsenx2",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\amali\\WebstormProjects\\random_game\\src\\index.tsx",[],["62","63"],"C:\\Users\\amali\\WebstormProjects\\random_game\\src\\serviceWorker.ts",[],"C:\\Users\\amali\\WebstormProjects\\random_game\\src\\App.tsx",["64"],"C:\\Users\\amali\\WebstormProjects\\random_game\\src\\config.ts",[],"C:\\Users\\amali\\WebstormProjects\\random_game\\src\\common\\api.ts",[],"C:\\Users\\amali\\WebstormProjects\\random_game\\src\\common\\utils.ts",[],"C:\\Users\\amali\\WebstormProjects\\random_game\\src\\store.ts",[],"C:\\Users\\amali\\WebstormProjects\\random_game\\src\\features\\filter\\index.tsx",["65"],"import React, { useCallback, useMemo } from 'react';\r\nimport './index.scss';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Box, TextField } from '@material-ui/core';\r\nimport { useFormik } from 'formik';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport config from '../../config';\r\nimport { GamesRequestParams } from '../../interfaces/Games';\r\nimport { SimpleGenre } from '../../interfaces/Genres';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { FilterState, setFilter, THIS_YEAR } from './slice';\r\nimport { fetchVideoGames } from \"../game/slice\";\r\n\r\nconst yearsList = generateYears(config.earliestReleaseYearInBase, THIS_YEAR);\r\n\r\nfunction generateYears(from: number, to: number): number[] {\r\n    const result = [];\r\n    for (let year = from; year <= to; ++year) result.push(year);\r\n    return result;\r\n}\r\n\r\nfunction Filter({ genresList }: SearchFilterPropTypes) {\r\n    const dispatch = useDispatch();\r\n\r\n    const initialValues: FilterState = {\r\n        yearFrom: yearsList[0],\r\n        yearTo: yearsList[yearsList.length - 1],\r\n        genre: null,\r\n        page: 1\r\n    };\r\n\r\n    const {\r\n        handleSubmit,\r\n        handleChange, values: {\r\n            genre, yearTo, yearFrom,\r\n        },\r\n    } = useFormik({\r\n        initialValues,\r\n        onSubmit: (values) => {\r\n            dispatch(setFilter(values));\r\n            dispatch(fetchVideoGames());\r\n        },\r\n    });\r\n\r\n    const yearsToList: number[] = useMemo(() => {\r\n        return yearFrom ? [...yearsList].splice(yearsList.indexOf(yearFrom)) : yearsList\r\n    }, [yearFrom]);\r\n\r\n    const yearsFromList: number[] = useMemo(() => {\r\n        if (yearTo) {\r\n            const list = [...yearsList];\r\n            list.splice(yearsList.indexOf(yearTo) + 1);\r\n            return list;\r\n        }\r\n        return yearsToList;\r\n    }, [yearTo, yearsToList]);\r\n\r\n    const onAutocompleteChange = useCallback((id: string, value: any) => {\r\n        return handleChange({ target: { value, id } })\r\n    }, [handleChange]);\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"search-filter\">\r\n            <Autocomplete\r\n                className=\"search-filter__genres\"\r\n                options={genresList}\r\n                getOptionLabel={(option: SimpleGenre) => option.name}\r\n                onChange={(_, v) => onAutocompleteChange('genre', v)}\r\n                value={genre}\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        variant=\"standard\"\r\n                        label=\"Genre\"\r\n                    />\r\n                )}\r\n            />\r\n            <Box className=\"search-filter__years\">\r\n                <Autocomplete\r\n                    className=\"search-filter__year\"\r\n                    options={yearsFromList}\r\n                    getOptionLabel={(option: number) => option.toString()}\r\n                    value={yearFrom}\r\n                    onChange={(_, v) => onAutocompleteChange('yearFrom', v)}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            variant=\"standard\"\r\n                            label=\"Release year (from)\"\r\n                        />\r\n                    )}\r\n                />\r\n                <Autocomplete\r\n                    className=\"search-filter__year\"\r\n                    options={yearsToList}\r\n                    getOptionLabel={(option: number) => option.toString()}\r\n                    value={yearTo}\r\n                    onChange={(_, v) => onAutocompleteChange('yearTo', v)}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label=\"Release year (to)\"\r\n                        />\r\n                    )}\r\n                />\r\n            </Box>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n            >\r\n                Find\r\n            </Button>\r\n        </form>\r\n    );\r\n}\r\n\r\ninterface SearchFilterPropTypes {\r\n    genresList: SimpleGenre[]\r\n}\r\n\r\nexport default Filter;\r\n",["66","67"],"C:\\Users\\amali\\WebstormProjects\\random_game\\src\\features\\filter\\slice.ts",[],"C:\\Users\\amali\\WebstormProjects\\random_game\\src\\features\\game\\slice.ts",[],"C:\\Users\\amali\\WebstormProjects\\random_game\\src\\features\\game\\index.tsx",[],"C:\\Users\\amali\\WebstormProjects\\random_game\\src\\features\\difficulty\\index.tsx",["68"],"import React, { useCallback } from 'react';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Difficulty, fetchVideoGames, setDifficulty } from '../game/slice';\r\nimport { useAppDispatch } from \"../../store\";\r\nimport { setFilterStateToDefault, } from '../filter/slice';\r\n\r\nfunction DifficultySelect() {\r\n    const history = useHistory();\r\n    const dispatch = useAppDispatch();\r\n\r\n    const goToHardcore = useCallback(() => {\r\n        dispatch(setFilterStateToDefault());\r\n        dispatch(setDifficulty(Difficulty.Hardcore));\r\n        dispatch(fetchVideoGames()).then(() => {\r\n            history.push('/game');\r\n        })\r\n    }, [dispatch, history]);\r\n\r\n    /*const goToMedium = useCallback(() => {\r\n        dispatch(setDifficulty(Difficulty.Medium));\r\n        // todo generate random values there\r\n        dispatch(setFilterState(\r\n            {\r\n                yearFrom: 2000, yearTo: 2004,\r\n                genre: { id: 4, name: 'Action' }, page: 1, pageSize: 6\r\n            }))\r\n        dispatch(fetchVideoGames()).then(() => {\r\n            history.push('/game');\r\n        })\r\n    }, [dispatch, history]);*/\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>Select difficulty:</h2>\r\n            {/*<Button\r\n                variant=\"outlined\"\r\n                size=\"large\"\r\n                color=\"primary\"\r\n            >\r\n                Easy\r\n            </Button>*/}\r\n            {/*<Button\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                color=\"primary\"\r\n                onClick={goToMedium}\r\n            >\r\n                Medium\r\n            </Button>*/}\r\n            <Button\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                color=\"secondary\"\r\n                onClick={goToHardcore}\r\n            >\r\n                Hardcore\r\n            </Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DifficultySelect;","C:\\Users\\amali\\WebstormProjects\\random_game\\src\\features\\start\\index.tsx",[],"C:\\Users\\amali\\WebstormProjects\\random_game\\src\\interfaces\\common.ts",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":3,"column":8,"nodeType":"75","messageId":"76","endLine":3,"endColumn":14},{"ruleId":"73","severity":1,"message":"77","line":8,"column":10,"nodeType":"75","messageId":"76","endLine":8,"endColumn":28},{"ruleId":"69","replacedBy":"78"},{"ruleId":"71","replacedBy":"79"},{"ruleId":"73","severity":1,"message":"80","line":6,"column":10,"nodeType":"75","messageId":"76","endLine":6,"endColumn":24},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"@typescript-eslint/no-unused-vars","'Filter' is defined but never used.","Identifier","unusedVar","'GamesRequestParams' is defined but never used.",["81"],["82"],"'setFilterState' is defined but never used.","no-global-assign","no-unsafe-negation"]